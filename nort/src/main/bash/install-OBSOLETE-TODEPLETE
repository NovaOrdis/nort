#!/bin/bash

function usage()
{
cat  <<EOF

Provider of a uniform command set to build the installable artifact and install it locally or
remotely.

    ./install [--verbose|-v] [--force] [--clean] [--no-tests] [--zip-only] [environment-name]

Where:

    --force -   if the version being installed is already installed, the script will stop,  unless
        --force is specified.

    environment-name -   the name of the environment to install into.  If  not  specified  install
        locally.  A list  of  environments  and  associated  configuration  can  be  found  in the
        ./util/environments directory.

Other Options:

    --help

    --clean - performs an maven clean before attempting to build

    --no-tests

    --zip-only - does not perform the last step of actually installing the zip, just builds it and
        leaves it in the ./target directory.


Examples:


    Build and install the current version locally:

        ./install

    Build and install the current version locally, overwritting the copy that is already
    installed.

        ./install --force

    Build and install the current version in ec2-default, overwritting the copy that is
    already installed.

        ./install ec2-default --force

EOF
}

help=false
verbose=false
no_tests=false
project_home="."


function clean()
{
    debug-arguments $@
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"

    local maven_quiet="-q"
    ${verbose} && maven_quiet=""

    (cd ${project_home}; mvn ${maven_quiet} clean) && debug "mvn ${maven_quiet} clean" || exit 1
}


function install-remotely()
{
    debug-arguments $@
    local zip_file=$1
    local remote_environment=$2
    local force=$3
    [ -z ${force} ] && force=false
    [ -z ${project_home} ] && fail "${FUNCNAME[0]}: remote enviornment name not provided"
    [ -z ${zip_file} ] && fail "${FUNCNAME[0]}: zip file not provided"
    [ -f ${zip_file} ] || fail "${FUNCNAME[0]}: zip file ${zip_file} does not exist"
    [ -z ${project_home} ] && fail "global variable 'project_home' not defined"

    local environment_file=${project_home}/environments/${remote_environment}
    [ -f ${environment_file} ] || fail "environment configuration file ${environment_file} does not exist"

    local user
    local installation_dir
    local hosts # space separate list of resolvable host names or IPs

    . ${environment_file}

    [ -z ${user} ] && fail "environment ${remote_environment} incorrectly configured: 'user' not specfied in ${environment_file}"
    [ -z ${installation_dir} ] && fail "environment ${remote_environment} incorrectly configured: 'installation_dir' not specfied in ${environment_file}"
    [ -z ${hosts} ] && fail "environment ${remote_environment} incorrectly configured: 'hosts' not specfied in ${environment_file}"

    for host in ${hosts}; do
        install-over-ssh ${user} ${host} ${installation_dir} ${zip_file} ${force} || exit 1
    done
}

function install-over-ssh()
{
    debug-arguments $@

    local user=$1
    local host=$2
    local installation_dir=$3
    local zip_file=$4
    local force=$5
    [ -z ${force} ] && force=false

    debug "installing into ${user}@${host}"

    [ -z ${user} ] && fail "'user' not specified"
    [ -z ${host} ] && fail "'host' not specified"
    [ -z ${installation_dir} ] && fail "'installation_dir' not specified"
    [ -z ${zip_file} ] && fail "'zip_file' not specified"
    [ -f ${zip_file} ] || fail "${zip_file} does not exist"

    debug "uploading artifacts to ${user}@${host} ..."
    scp ${zip_file} $0 ${user}@${host}:${installation_dir} && debug "" || fail "failed to scp to ${user}@${host}:${installation_dir}"

    ${force} && force_flag="--force"
    ${verbose} && verbose_flag="--verbose"

    local ssh_command="ssh ${user}@${host} ${installation_dir}/$(basename $0) ${verbose_flag} --zip-file ${installation_dir}/$(basename ${zip_file}) --installation-dir ${installation_dir} ${force_flag}"
    debug ${ssh_command}
    ${ssh_command} && debug "ssh successful" || debug "failed to execute the remote installation script on ${user}@${host}"
}

function main()
{
    local force
    local remote_environment
    local clean=false
    local zip_file
    local installation_dir
    local zip_only=false
    while [ ! -z $1 ]; do
        if [ $1 = "--help" ]; then help=true
        elif [ $1 = "--verbose" -o $1 = "-v" ]; then verbose=true;
        elif [ $1 = "--no-tests" ]; then no_tests=true;
        elif [ $1 = "--clean" ]; then clean=true;
        elif [ $1 = "--force" ]; then force=true;
        elif [ $1 = "--zip-only" ]; then zip_only=true;
        elif [ $1 = "--zip-file" ]; then shift; zip_file=$1                 # this happens on a remote host
        elif [ $1 = "--installation-dir" ]; then shift; installation_dir=$1 # this happens on a remote host
        elif [ -z ${remote_environment} ]; then remote_environment=$1;
        else fail "unknown argument: $1"
        fi
        shift
    done

    ${help} && { usage; exit 0; }

    project_home=$(dirname $0)

    [ -z ${zip_file} ] && zip_file=${project_home}/target/$(get-artifact-zip-name)

    ${clean} && clean;

    ! is-zip-available ${zip_file} && build-zip

    ${zip_only} && { echo "zip file ${zip_file} is available for distribution"; exit 0; }

    if [ -z ${installation_dir} ]; then
        [ -z "${RUNTIME_DIR}" ] && fail "no RUNTIME_DIR defined";
        installation_dir=${RUNTIME_DIR} # this only happens locally
    fi

    if [ -z ${remote_environment} ]; then
        install-locally ${zip_file} ${installation_dir} ${force} # this may also run remotely
    else
        install-remotely ${project_home}/target/$(get-artifact-zip-name) ${remote_environment} ${force}
    fi
}

main $@

